# -*- coding: utf-8 -*-

# ----------------- Importations des biblioth√®ques -----------------
import logging
import os
import asyncio
import csv
from datetime import datetime
from flask import Flask
from threading import Thread
from dotenv import load_dotenv

# Importations des modules Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters, Application

# ----------------- Importation des textes multilingues et donn√©es produits -----------------
from Dictionnaire import languages, welcome_texts, who_are_you_texts, choixproduit_text, thank_you_texts, produits_text, choixdproduit_text, ask_price_messages, revmenbien_texts, revmenlang_texts, monnaie_texts, Popospri_texts, etudier_texts, merci_texts, entrnumtel_texts, merciteleph_texts,  montvalid_texts, numtelvali_texts

from produits import property_fields, property_details

# ----------------- Partie Flask pour garder le bot actif (utile sur Replit) -----------------
flask_app = Flask('')

@flask_app.route('/')
def home():
    return "Le bot Telegram est actif."

def run():
    flask_app.run(host='0.0.0.0', port=8080)

def keep_alive():
    # Lancement du serveur Flask dans un thread s√©par√©
    t = Thread(target=run)
    t.start()

# ----------------- Initialisation du bot Telegram -----------------
# Chargement des variables d'environnement depuis .env (notamment le token du bot)
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("Le token Telegram est introuvable dans le fichier .env")

# Configuration des logs pour suivre les erreurs/info
logging.basicConfig(level=logging.INFO)

# Construction de l'application Telegram avec le token
app = ApplicationBuilder().token(TOKEN).build()


# Handler pour la commande /start ou le bouton "start"
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Cr√©ation d‚Äôun clavier avec les langues disponibles
    keyboard = [
        [InlineKeyboardButton(name, callback_data=code)]
        for code, name in languages.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Affichage selon le type de mise √† jour (message ou callback)
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("üëÖ :", reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text("üëÖ :", reply_markup=reply_markup)

# Handler appel√© apr√®s le choix de la langue
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    lang_code = query.data
    context.user_data["lang"] = lang_code  # Stocke la langue choisie

    welcome = welcome_texts[lang_code]
    question = who_are_you_texts[lang_code]

    await query.edit_message_text(f"{welcome}\n\n{question}")
# Handler quand l‚Äôutilisateur choisit un produit (villa, garage, terrain...)
async def handle_product_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    product = query.data
    lang = context.user_data.get("lang", "fr")

    # R√©cup√©ration des d√©tails du produit
    choix_text = choixdproduit_text.get(lang, choixdproduit_text["fr"])
    product_label = produits_text.get(product, {}).get(lang, product)
    details = property_details.get(product, {})

    # Donn√©es sp√©cifiques au bien
    title = details.get("title", {}).get(lang, "N/A")
    description = details.get("description", {}).get(lang, "N/A")
    address = details.get("address", {}).get(lang, "N/A")
    surface = details.get("surface", {}).get(lang, "N/A")
    location = details.get("location", {}).get(lang, "N/A")
    photo_link = details.get("photo_link", {}).get(lang, "N/A")
    video_link = details.get("video_link", {}).get(lang, "N/A")
    price = details.get("price", {}).get(lang, "N/A")

    # Cr√©ation de la r√©ponse
    message = (
        f"{choix_text} {product_label}.\n\n"
        f"{property_fields['üìù title'][lang]}: {title}\n"
        f"{property_fields['üóíÔ∏è description'][lang]}: {description}\n"
        f"{property_fields['üè† address'][lang]}: {address}\n"
        f"{property_fields['üìè surface'][lang]}: {surface}\n"
        f"{property_fields['üìç G√©olocalisation'][lang]}: {location}\n"
        f"{property_fields['üí∞ price'][lang]}: {price}\n"
        f"{property_fields['üì∏ Photo_link'][lang]}: {photo_link}\n"
        f"{property_fields['üé• video_link'][lang]}: {video_link}\n"
    )

    # Affichage du message avec un petit d√©lai
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    await asyncio.sleep(0)
    await query.edit_message_text(message)
    await asyncio.sleep(0)

    # Affichage des options apr√®s visualisation du produit
    reply_markup = InlineKeyboardMarkup([
        # [InlineKeyboardButton("‚úÖ Donner un prix en : ( üá≤üá¶üí∞ Dirham marocain ) ", callback_data="propose_price")],
        [InlineKeyboardButton(
            f"‚úÖ {Popospri_texts.get(lang, Popospri_texts['fr'])} {monnaie_texts.get(lang, monnaie_texts['fr'])}",
            callback_data="propose_price")],
        [InlineKeyboardButton(revmenbien_texts.get(lang, revmenbien_texts["fr"]), callback_data="menu")]
    ])
    await query.edit_message_reply_markup(reply_markup=reply_markup)

# Affiche le menu des biens √† tout moment

# ----------------- Enregistrement des Handlers -----------------
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("menu", menu))
app.add_handler(CallbackQueryHandler(set_language, pattern="^(" + "|".join(languages.keys()) + ")$"))
app.add_handler(CallbackQueryHandler(handle_propose_price, pattern="^propose_price$"))
app.add_handler(CallbackQueryHandler(handle_return_to_menu, pattern="^menu$"))
app.add_handler(CallbackQueryHandler(handle_product_selection, pattern="^(villa|garage|terrain1|terrain2|terrain3)$"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
app.add_handler(CallbackQueryHandler(start, pattern="^start$"))  # Red√©marre depuis le d√©but

# ----------------- D√©marrage du Bot -----------------
if __name__ == "__main__":
    keep_alive()  # Lance Flask dans un thread pour maintenir le bot actif
    app.run_polling()  # D√©marre le bot Telegram en mode polling

